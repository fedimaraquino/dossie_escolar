#!/usr/bin/env python3
"""
Script para criar configura√ß√µes de exemplo
"""

from app import create_app

def criar_configuracoes_exemplo():
    """Criar configura√ß√µes de exemplo"""
    print("‚öôÔ∏è CRIANDO CONFIGURA√á√ïES DE EXEMPLO")
    print("=" * 40)
    
    try:
        app = create_app()
        
        with app.app_context():
            from models import db, ConfiguracaoEscola, Escola
            
            # Verificar se j√° existem configura√ß√µes
            configs_existentes = ConfiguracaoEscola.query.count()
            print(f"üìä Configura√ß√µes existentes: {configs_existentes}")
            
            if configs_existentes > 0:
                print("‚ÑπÔ∏è  J√° existem configura√ß√µes no sistema")
                
                # Mostrar configura√ß√µes existentes
                configs = ConfiguracaoEscola.query.all()
                for config in configs:
                    escola_nome = config.escola.nome if config.escola else "Global"
                    print(f"   - {escola_nome}: {config.chave} = {config.valor}")
                
                return True
            
            # Buscar escolas
            escolas = Escola.query.all()
            print(f"üè´ Escolas encontradas: {len(escolas)}")
            
            # Configura√ß√µes globais
            configuracoes_globais = [
                {
                    'chave': 'sistema_manutencao',
                    'valor': 'false',
                    'tipo': 'boolean',
                    'descricao': 'Sistema em modo de manuten√ß√£o'
                },
                {
                    'chave': 'backup_automatico',
                    'valor': 'true',
                    'tipo': 'boolean',
                    'descricao': 'Backup autom√°tico habilitado'
                },
                {
                    'chave': 'logs_retencao_dias',
                    'valor': '90',
                    'tipo': 'integer',
                    'descricao': 'Dias para reten√ß√£o de logs'
                },
                {
                    'chave': 'max_anexos_por_dossie',
                    'valor': '10',
                    'tipo': 'integer',
                    'descricao': 'M√°ximo de anexos por dossi√™'
                },
                {
                    'chave': 'email_notificacoes',
                    'valor': 'admin@sistema.com',
                    'tipo': 'string',
                    'descricao': 'Email para notifica√ß√µes do sistema'
                }
            ]
            
            print("\nüìù Criando configura√ß√µes globais...")
            for config_data in configuracoes_globais:
                config = ConfiguracaoEscola(
                    escola_id=None,  # Global
                    chave=config_data['chave'],
                    valor=config_data['valor'],
                    tipo=config_data['tipo'],
                    descricao=config_data['descricao']
                )
                db.session.add(config)
                print(f"   ‚úÖ {config_data['chave']}")
            
            # Configura√ß√µes espec√≠ficas por escola
            configuracoes_escola = [
                {
                    'chave': 'horario_funcionamento',
                    'valor': '07:00-17:00',
                    'tipo': 'string',
                    'descricao': 'Hor√°rio de funcionamento da escola'
                },
                {
                    'chave': 'permite_emprestimo_externo',
                    'valor': 'true',
                    'tipo': 'boolean',
                    'descricao': 'Permite empr√©stimo de dossi√™s para externos'
                },
                {
                    'chave': 'dias_limite_emprestimo',
                    'valor': '15',
                    'tipo': 'integer',
                    'descricao': 'Dias limite para empr√©stimo de dossi√™s'
                },
                {
                    'chave': 'responsavel_dossies',
                    'valor': 'Secretaria',
                    'tipo': 'string',
                    'descricao': 'Setor respons√°vel pelos dossi√™s'
                }
            ]
            
            print(f"\nüè´ Criando configura√ß√µes para {len(escolas)} escola(s)...")
            for escola in escolas:
                print(f"\n   üìç {escola.nome}:")
                for config_data in configuracoes_escola:
                    config = ConfiguracaoEscola(
                        escola_id=escola.id,
                        chave=config_data['chave'],
                        valor=config_data['valor'],
                        tipo=config_data['tipo'],
                        descricao=config_data['descricao']
                    )
                    db.session.add(config)
                    print(f"      ‚úÖ {config_data['chave']}")
            
            # Salvar todas as configura√ß√µes
            db.session.commit()
            
            # Verificar resultado
            total_configs = ConfiguracaoEscola.query.count()
            configs_globais = ConfiguracaoEscola.query.filter_by(escola_id=None).count()
            configs_escolas = ConfiguracaoEscola.query.filter(ConfiguracaoEscola.escola_id.isnot(None)).count()
            
            print(f"\nüìä Resultado:")
            print(f"   Total de configura√ß√µes: {total_configs}")
            print(f"   Configura√ß√µes globais: {configs_globais}")
            print(f"   Configura√ß√µes por escola: {configs_escolas}")
            
            return True
            
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        import traceback
        traceback.print_exc()
        return False

def testar_pagina_configuracoes():
    """Testar p√°gina de configura√ß√µes"""
    print("\nüß™ TESTANDO P√ÅGINA DE CONFIGURA√á√ïES")
    print("=" * 40)
    
    try:
        app = create_app()
        
        with app.app_context():
            with app.test_client() as client:
                # Simular login de admin
                with client.session_transaction() as sess:
                    sess['user_id'] = 1
                    sess['user_name'] = 'Admin Sistema'
                    sess['user_email'] = 'admin@sistema.com'
                    sess['user_perfil'] = 'Administrador Geral'
                
                # Testar rota de configura√ß√µes
                response = client.get('/admin/configuracoes')
                
                print(f"üìä Status da resposta: {response.status_code}")
                
                if response.status_code == 200:
                    print("‚úÖ P√°gina carregada com sucesso")
                    
                    data = response.get_data(as_text=True)
                    
                    if 'Configura√ß√µes do Sistema' in data:
                        print("‚úÖ T√≠tulo presente")
                    
                    if 'Configura√ß√µes Globais' in data:
                        print("‚úÖ Se√ß√£o de configura√ß√µes globais presente")
                    
                    if 'Configura√ß√µes por Escola' in data:
                        print("‚úÖ Se√ß√£o de configura√ß√µes por escola presente")
                    
                    return True
                else:
                    print(f"‚ùå Erro na p√°gina: {response.status_code}")
                    return False
                    
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == '__main__':
    print("‚öôÔ∏è CONFIGURA√á√ÉO DO SISTEMA")
    print("=" * 50)
    
    # 1. Criar configura√ß√µes de exemplo
    success1 = criar_configuracoes_exemplo()
    
    # 2. Testar p√°gina
    success2 = testar_pagina_configuracoes()
    
    if success1 and success2:
        print("\nüéâ CONFIGURA√á√ïES CRIADAS E TESTADAS!")
        print("\nüåê Acesse:")
        print("   http://localhost:5000/admin/configuracoes")
        print("\nüìã Menu Administra√ß√£o agora funciona:")
        print("   ‚úÖ Logs de Auditoria")
        print("   ‚úÖ Configura√ß√µes")
    else:
        print("\n‚ö†Ô∏è  Alguns problemas encontrados")
        print(f"   Cria√ß√£o: {'‚úÖ' if success1 else '‚ùå'}")
        print(f"   Teste: {'‚úÖ' if success2 else '‚ùå'}")
