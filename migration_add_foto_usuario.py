#!/usr/bin/env python3
"""
Migra√ß√£o para adicionar campo 'foto' na tabela de usu√°rios
"""

from app import create_app

def add_foto_field():
    """Adicionar campo foto na tabela usuarios"""
    print("üîÑ MIGRA√á√ÉO: Adicionando campo 'foto' na tabela usuarios")
    print("=" * 60)
    
    try:
        app = create_app()
        
        with app.app_context():
            from models import db
            from sqlalchemy import text
            
            # Verificar se a coluna j√° existe
            print("üîç Verificando se a coluna 'foto' j√° existe...")
            
            result = db.session.execute(text("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = 'usuarios' 
                AND column_name = 'foto'
            """)).fetchone()
            
            if result:
                print("   ‚ÑπÔ∏è  Coluna 'foto' j√° existe na tabela usuarios")
                return True
            
            # Adicionar coluna foto
            print("üìù Adicionando coluna 'foto' na tabela usuarios...")
            
            db.session.execute(text("""
                ALTER TABLE usuarios 
                ADD COLUMN foto VARCHAR(255)
            """))
            
            # Commit da altera√ß√£o
            db.session.commit()
            
            print("   ‚úÖ Coluna 'foto' adicionada com sucesso!")
            
            # Verificar se foi criada corretamente
            result = db.session.execute(text("""
                SELECT column_name, data_type, is_nullable
                FROM information_schema.columns 
                WHERE table_name = 'usuarios' 
                AND column_name = 'foto'
            """)).fetchone()
            
            if result:
                print(f"   üìä Detalhes da coluna:")
                print(f"      Nome: {result[0]}")
                print(f"      Tipo: {result[1]}")
                print(f"      Nullable: {result[2]}")
            
            # Criar diret√≥rios necess√°rios
            print("\nüìÅ Criando diret√≥rios para fotos...")
            
            import os
            
            directories = [
                'static/uploads',
                'static/uploads/fotos',
                'static/img'
            ]
            
            for directory in directories:
                if not os.path.exists(directory):
                    os.makedirs(directory, exist_ok=True)
                    print(f"   ‚úÖ Diret√≥rio criado: {directory}")
                else:
                    print(f"   ‚ÑπÔ∏è  Diret√≥rio j√° existe: {directory}")
            
            # Verificar se a imagem padr√£o existe
            default_avatar_path = 'static/img/default-avatar.svg'
            if os.path.exists(default_avatar_path):
                print(f"   ‚úÖ Imagem padr√£o encontrada: {default_avatar_path}")
            else:
                print(f"   ‚ö†Ô∏è  Imagem padr√£o n√£o encontrada: {default_avatar_path}")
            
            print(f"\nüéâ MIGRA√á√ÉO CONCLU√çDA COM SUCESSO!")
            print(f"\nüìã Resumo das altera√ß√µes:")
            print(f"   ‚úÖ Campo 'foto' adicionado na tabela usuarios")
            print(f"   ‚úÖ Diret√≥rios criados para upload de fotos")
            print(f"   ‚úÖ Sistema pronto para gerenciar fotos de usu√°rios")
            
            return True
            
    except Exception as e:
        print(f"‚ùå Erro durante a migra√ß√£o: {e}")
        import traceback
        traceback.print_exc()
        return False

def verify_migration():
    """Verificar se a migra√ß√£o foi aplicada corretamente"""
    print("\nüîç VERIFICA√á√ÉO DA MIGRA√á√ÉO")
    print("=" * 40)
    
    try:
        app = create_app()
        
        with app.app_context():
            from models import db, Usuario
            from sqlalchemy import text
            
            # Verificar estrutura da tabela
            print("üìä Verificando estrutura da tabela usuarios...")
            
            result = db.session.execute(text("""
                SELECT column_name, data_type, is_nullable
                FROM information_schema.columns 
                WHERE table_name = 'usuarios'
                ORDER BY ordinal_position
            """)).fetchall()
            
            print("\nüìã Colunas da tabela usuarios:")
            for row in result:
                status = "‚úÖ" if row[0] == 'foto' else "  "
                print(f"   {status} {row[0]:20s} | {row[1]:15s} | Nullable: {row[2]}")
            
            # Testar modelo Usuario
            print("\nüß™ Testando modelo Usuario...")
            
            # Verificar se o modelo tem os novos m√©todos
            usuario_test = Usuario()
            
            methods_to_check = ['get_foto_url', 'has_foto', 'set_foto', 'remove_foto']
            
            for method in methods_to_check:
                if hasattr(usuario_test, method):
                    print(f"   ‚úÖ M√©todo {method} dispon√≠vel")
                else:
                    print(f"   ‚ùå M√©todo {method} n√£o encontrado")
            
            # Verificar diret√≥rios
            print("\nüìÅ Verificando diret√≥rios:")
            
            import os
            
            directories = [
                'static/uploads/fotos',
                'static/img'
            ]
            
            for directory in directories:
                if os.path.exists(directory):
                    print(f"   ‚úÖ {directory}")
                else:
                    print(f"   ‚ùå {directory} n√£o encontrado")
            
            print(f"\n‚úÖ VERIFICA√á√ÉO CONCLU√çDA!")
            
            return True
            
    except Exception as e:
        print(f"‚ùå Erro na verifica√ß√£o: {e}")
        return False

if __name__ == '__main__':
    print("üöÄ MIGRA√á√ÉO: CAMPO FOTO PARA USU√ÅRIOS")
    print("=" * 70)
    
    try:
        # Executar migra√ß√£o
        if add_foto_field():
            # Verificar migra√ß√£o
            verify_migration()
            
            print(f"\nüéâ MIGRA√á√ÉO COMPLETA!")
            print(f"\nüìã Pr√≥ximos passos:")
            print(f"   1. Reinicie o servidor Flask")
            print(f"   2. Acesse o perfil do usu√°rio")
            print(f"   3. Teste o upload de foto")
            print(f"   4. Verifique se a foto aparece na barra de navega√ß√£o")
            
        else:
            print(f"\n‚ùå MIGRA√á√ÉO FALHOU!")
            print(f"   Verifique os erros acima e tente novamente")
            
    except Exception as e:
        print(f"\n‚ùå Erro geral: {e}")
        import traceback
        traceback.print_exc()
