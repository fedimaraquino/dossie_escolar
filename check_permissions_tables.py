#!/usr/bin/env python3
# check_permissions_tables.py - Verificar tabelas de permiss√µes

def check_tables():
    """Verificar se as tabelas de permiss√µes foram criadas"""
    print("üîç VERIFICANDO TABELAS DE PERMISS√ïES")
    print("=" * 40)
    
    try:
        from app import create_app
        
        app = create_app()
        
        with app.app_context():
            from models import db
            
            # Verificar tabelas no banco
            with db.engine.connect() as conn:
                result = conn.execute(db.text("""
                    SELECT table_name 
                    FROM information_schema.tables 
                    WHERE table_schema = 'public' 
                    ORDER BY table_name
                """))
                tables = [row[0] for row in result]
            
            print(f"üìã Tabelas no banco ({len(tables)}):")
            for table in tables:
                print(f"   ‚úì {table}")
            
            # Verificar se tabelas de permiss√µes existem
            required_tables = ['permissoes', 'perfil_permissoes']
            missing_tables = []
            
            for table in required_tables:
                if table in tables:
                    print(f"‚úÖ {table} - OK")
                else:
                    print(f"‚ùå {table} - FALTANDO")
                    missing_tables.append(table)
            
            if missing_tables:
                print(f"\n‚ö†Ô∏è  Tabelas faltando: {missing_tables}")
                print("üí° Criando tabelas manualmente...")
                create_tables_manually()
            else:
                print("\n‚úÖ Todas as tabelas de permiss√µes existem!")
                setup_permissions()
            
            return True
            
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        return False

def create_tables_manually():
    """Criar tabelas de permiss√µes manualmente"""
    try:
        from app import create_app
        
        app = create_app()
        
        with app.app_context():
            from models import db
            
            print("üèóÔ∏è  Criando tabelas...")
            db.create_all()
            print("‚úÖ Tabelas criadas!")
            
            # Verificar novamente
            with db.engine.connect() as conn:
                result = conn.execute(db.text("""
                    SELECT table_name 
                    FROM information_schema.tables 
                    WHERE table_name IN ('permissoes', 'perfil_permissoes')
                    AND table_schema = 'public'
                """))
                tables = [row[0] for row in result]
            
            print(f"üìä Tabelas de permiss√µes: {tables}")
            
            if len(tables) >= 2:
                setup_permissions()
            
    except Exception as e:
        print(f"‚ùå Erro ao criar tabelas: {e}")

def setup_permissions():
    """Configurar permiss√µes b√°sicas"""
    print("\nüîê CONFIGURANDO PERMISS√ïES B√ÅSICAS")
    print("=" * 40)
    
    try:
        from app import create_app
        
        app = create_app()
        
        with app.app_context():
            from models import db, Permissao, PerfilPermissao, Perfil
            
            # Permiss√µes b√°sicas
            permissoes_basicas = [
                {'nome': 'admin_total', 'descricao': 'Administra√ß√£o total', 'modulo': 'admin', 'acao': 'total'},
                {'nome': 'dossie_criar', 'descricao': 'Criar dossi√™s', 'modulo': 'dossie', 'acao': 'criar'},
                {'nome': 'dossie_editar', 'descricao': 'Editar dossi√™s', 'modulo': 'dossie', 'acao': 'editar'},
                {'nome': 'dossie_visualizar', 'descricao': 'Visualizar dossi√™s', 'modulo': 'dossie', 'acao': 'visualizar'},
                {'nome': 'usuario_criar', 'descricao': 'Criar usu√°rios', 'modulo': 'usuario', 'acao': 'criar'},
                {'nome': 'usuario_editar', 'descricao': 'Editar usu√°rios', 'modulo': 'usuario', 'acao': 'editar'},
                {'nome': 'usuario_visualizar', 'descricao': 'Visualizar usu√°rios', 'modulo': 'usuario', 'acao': 'visualizar'},
            ]
            
            # Criar permiss√µes
            for perm_data in permissoes_basicas:
                existing = Permissao.query.filter_by(nome=perm_data['nome']).first()
                if not existing:
                    permissao = Permissao(**perm_data)
                    db.session.add(permissao)
                    print(f"‚úÖ Criada: {perm_data['nome']}")
            
            db.session.commit()
            
            # Atribuir permiss√£o total ao Admin Geral
            admin_perfil = Perfil.query.filter_by(perfil='Administrador Geral').first()
            if admin_perfil:
                admin_perm = Permissao.query.filter_by(nome='admin_total').first()
                if admin_perm:
                    existing_pp = PerfilPermissao.query.filter_by(
                        perfil_id=admin_perfil.id_perfil,
                        permissao_id=admin_perm.id
                    ).first()
                    
                    if not existing_pp:
                        pp = PerfilPermissao(
                            perfil_id=admin_perfil.id_perfil,
                            permissao_id=admin_perm.id
                        )
                        db.session.add(pp)
                        db.session.commit()
                        print("‚úÖ Admin Geral configurado com permiss√£o total")
            
            print("\nüìä Resumo:")
            print(f"   Permiss√µes: {Permissao.query.count()}")
            print(f"   Perfil-Permiss√µes: {PerfilPermissao.query.count()}")
            
    except Exception as e:
        print(f"‚ùå Erro ao configurar permiss√µes: {e}")

if __name__ == '__main__':
    check_tables()
