#!/bin/bash
# Script de Monitoramento - Sistema de Dossi√™ Escolar

# Cores
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "${GREEN}$1${NC}"
}

warn() {
    echo -e "${YELLOW}$1${NC}"
}

error() {
    echo -e "${RED}$1${NC}"
}

info() {
    echo -e "${BLUE}$1${NC}"
}

# Banner
echo -e "${BLUE}"
echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
echo "‚ïë                                                              ‚ïë"
echo "‚ïë    üìä MONITORAMENTO DO SISTEMA DE DOSSI√ä ESCOLAR             ‚ïë"
echo "‚ïë    üåê Servidor: 10.0.1.185                                  ‚ïë"
echo "‚ïë                                                              ‚ïë"
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
echo -e "${NC}"

# Verificar Docker
info "üê≥ STATUS DO DOCKER"
echo "==================="
if docker info > /dev/null 2>&1; then
    log "‚úÖ Docker est√° rodando"
    if docker info | grep -q "Swarm: active"; then
        log "‚úÖ Docker Swarm est√° ativo"
    else
        error "‚ùå Docker Swarm n√£o est√° ativo"
    fi
else
    error "‚ùå Docker n√£o est√° rodando"
    exit 1
fi

echo ""

# Status das Stacks
info "üì¶ STATUS DAS STACKS"
echo "===================="
docker stack ls

echo ""

# Status dos Servi√ßos
info "üîß STATUS DOS SERVI√áOS"
echo "======================"
docker service ls

echo ""

# Verificar sa√∫de dos servi√ßos
info "üè• HEALTH CHECKS"
echo "================"

# Verificar Traefik
if curl -s http://10.0.1.185:8080/ping > /dev/null; then
    log "‚úÖ Traefik est√° respondendo"
else
    error "‚ùå Traefik n√£o est√° respondendo"
fi

# Verificar Portainer
if curl -s -I http://10.0.1.185:9000 | grep -q "200\|302"; then
    log "‚úÖ Portainer est√° respondendo"
else
    error "‚ùå Portainer n√£o est√° respondendo"
fi

# Verificar Aplica√ß√£o
if curl -s -I http://10.0.1.185 | grep -q "200\|302"; then
    log "‚úÖ Aplica√ß√£o est√° respondendo"
else
    error "‚ùå Aplica√ß√£o n√£o est√° respondendo"
fi

# Verificar Aplica√ß√£o Direta
if curl -s -I http://10.0.1.185:5000 | grep -q "200\|302"; then
    log "‚úÖ Aplica√ß√£o (porta 5000) est√° respondendo"
else
    error "‚ùå Aplica√ß√£o (porta 5000) n√£o est√° respondendo"
fi

echo ""

# Verificar PostgreSQL
info "üêò STATUS DO POSTGRESQL"
echo "======================="
POSTGRES_CONTAINER=$(docker ps -q -f name=postgres_postgres)
if [ ! -z "$POSTGRES_CONTAINER" ]; then
    if docker exec $POSTGRES_CONTAINER pg_isready -U dossie > /dev/null 2>&1; then
        log "‚úÖ PostgreSQL est√° respondendo"
        
        # Verificar conex√£o com banco
        if docker exec $POSTGRES_CONTAINER psql -U dossie -d dossie_escola -c "SELECT 1;" > /dev/null 2>&1; then
            log "‚úÖ Banco de dados 'dossie_escola' acess√≠vel"
        else
            error "‚ùå Banco de dados 'dossie_escola' n√£o acess√≠vel"
        fi
    else
        error "‚ùå PostgreSQL n√£o est√° respondendo"
    fi
else
    error "‚ùå Container PostgreSQL n√£o encontrado"
fi

echo ""

# Recursos do Sistema
info "üíª RECURSOS DO SISTEMA"
echo "======================"

# CPU e Mem√≥ria
echo "üß† Mem√≥ria:"
free -h

echo ""
echo "üíΩ Espa√ßo em Disco:"
df -h /opt

echo ""
echo "üìä Uso do Docker:"
docker system df

echo ""

# Top 5 containers por uso de CPU/Mem√≥ria
info "üîù TOP 5 CONTAINERS (CPU/MEM√ìRIA)"
echo "=================================="
docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.MemPerc}}" | head -6

echo ""

# Verificar logs recentes
info "üìã LOGS RECENTES"
echo "================"

echo "üåê √öltimos logs da aplica√ß√£o:"
docker service logs dossie_dossie-app --tail 5 2>/dev/null || warn "Logs da aplica√ß√£o n√£o dispon√≠veis"

echo ""
echo "üêò √öltimos logs do PostgreSQL:"
docker service logs postgres_postgres --tail 3 2>/dev/null || warn "Logs do PostgreSQL n√£o dispon√≠veis"

echo ""

# Verificar volumes
info "üíæ VOLUMES DOCKER"
echo "================="
docker volume ls | grep dossie

echo ""

# Verificar redes
info "üåê REDES DOCKER"
echo "==============="
docker network ls | grep -E "(traefik-public|app-network)"

echo ""

# Verificar conectividade de rede
info "üîó CONECTIVIDADE DE REDE"
echo "========================"

# Ping para gateway
GATEWAY=$(ip route | grep default | awk '{print $3}' | head -1)
if ping -c 1 $GATEWAY > /dev/null 2>&1; then
    log "‚úÖ Gateway ($GATEWAY) acess√≠vel"
else
    error "‚ùå Gateway ($GATEWAY) n√£o acess√≠vel"
fi

# Verificar DNS
if nslookup google.com > /dev/null 2>&1; then
    log "‚úÖ DNS funcionando"
else
    error "‚ùå DNS n√£o funcionando"
fi

echo ""

# Verificar portas abertas
info "üö™ PORTAS ABERTAS"
echo "================="
netstat -tlnp | grep -E ":(80|443|5000|8080|9000) " | awk '{print $1, $4}' | sort

echo ""

# Resumo final
info "üìä RESUMO FINAL"
echo "==============="

# Contar servi√ßos rodando
TOTAL_SERVICES=$(docker service ls --format "{{.Replicas}}" | wc -l)
RUNNING_SERVICES=$(docker service ls --format "{{.Replicas}}" | grep -c "/")

log "üì¶ Servi√ßos: $RUNNING_SERVICES/$TOTAL_SERVICES rodando"

# Verificar se todos os servi√ßos essenciais est√£o rodando
ESSENTIAL_SERVICES=("traefik_traefik" "portainer_portainer" "postgres_postgres" "dossie_dossie-app")
ALL_RUNNING=true

for service in "${ESSENTIAL_SERVICES[@]}"; do
    if docker service ls --format "{{.Name}}" | grep -q "^$service$"; then
        REPLICAS=$(docker service ls --filter name=$service --format "{{.Replicas}}")
        if [[ $REPLICAS == *"/"* ]]; then
            CURRENT=$(echo $REPLICAS | cut -d'/' -f1)
            DESIRED=$(echo $REPLICAS | cut -d'/' -f2)
            if [ "$CURRENT" = "$DESIRED" ] && [ "$CURRENT" != "0" ]; then
                log "‚úÖ $service: $REPLICAS"
            else
                error "‚ùå $service: $REPLICAS"
                ALL_RUNNING=false
            fi
        else
            error "‚ùå $service: formato inv√°lido ($REPLICAS)"
            ALL_RUNNING=false
        fi
    else
        error "‚ùå $service: n√£o encontrado"
        ALL_RUNNING=false
    fi
done

echo ""

if $ALL_RUNNING; then
    log "üéâ SISTEMA FUNCIONANDO PERFEITAMENTE!"
    log "üåê Acesse: http://10.0.1.185"
else
    error "‚ö†Ô∏è ALGUNS SERVI√áOS APRESENTAM PROBLEMAS!"
    warn "üí° Execute: docker service ls para mais detalhes"
fi

echo ""
info "üïê Monitoramento realizado em: $(date)"
echo ""
